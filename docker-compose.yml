version: '3.8'

services:
  db:
    build: .
    restart: always
    env_file:
      - .env
    environment:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        DB_USERNAME: ${DB_USERNAME}
        DB_SUPERUSER: ${DB_SUPERUSER}
        DB_VERSION: ${DB_VERSION}
        FILLING_AMOUNT: ${FILLING_AMOUNT}
        N: ${N}
        M: ${M}
    ports:
      - "5432:5432"
    volumes:
      - ./migrations:/migrations
      - ./bashScripts:/bashScript
      - ./bashScripts/entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
      - ./bashScripts/start_migrations.sh:/docker-entrypoint-initdb.d/start_migrations.sh
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "discord-db", "-h", "localhost", "-p", "5432" ]
      interval: 3s
      timeout: 5s
      retries: 5
      start_period: 5s
        
  analyze_app:
    restart: no
    container_name: analyze_app
    environment:
      ATTEMPT_COUNT: ${ATTEMPT_COUNT}
    build:
      context: ./discord
      dockerfile: Dockerfile
    volumes:
      - ./itogi:/docker-entrypoint-initdb.d/itogi
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8080:8080"

  backup:
    restart: always
    container_name: backup
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DB_USERNAME: ${DB_USERNAME}
      DB_SUPERUSER: ${DB_SUPERUSER}
      N: ${N}
      M: ${M}
    build:
      context: ./backup
      dockerfile: Dockerfile
    volumes:
      - ./backup:/backup
      - ./backup/backup.sh:/docker-entrypoint-initdb.d/backup.sh
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8081:8081"